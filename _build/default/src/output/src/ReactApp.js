// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Music from "./music/music.js";
import * as Synth from "./synth/synth.js";
import * as React from "react";
import * as Client from "react-dom/client";
import * as JsxRuntime from "react/jsx-runtime";

function ReactApp$App(Props) {
  var match = React.useState(function () {
        
      });
  var setSynth = match[1];
  var synth = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setAudioContextStarted = match$1[1];
  var match$2 = React.useState(function () {
        
      });
  var setPath = match$2[1];
  var path = match$2[0];
  var withSynth = function (synth, callback) {
    if (synth !== undefined) {
      return Curry._1(callback, Caml_option.valFromOption(synth));
    }
    var newSynth = Synth.createPolySynth(undefined);
    Curry._1(setSynth, (function (param) {
            return Caml_option.some(newSynth);
          }));
    Curry._1(setAudioContextStarted, (function (param) {
            return true;
          }));
    console.log("Audio Started");
    Curry._1(callback, newSynth);
  };
  var playNote = function (synth) {
    var note = Music.Note.of_number(0, 4);
    Synth.play_note(synth, note);
    console.log("Playing note");
  };
  var playChord = function (synth) {
    Synth.Play.chord(synth, Music.Note.c4, /* Major */0);
    console.log("Playing notes");
  };
  var playNoteGetPath = function (synth) {
    var scale = Music.Scale.make_of_string("C", Music.Scale.major_intervals);
    var match = Music.Scale.get_note_and_path(scale);
    var path = match[1];
    var note = match[0];
    Curry._1(setPath, (function (param) {
            return path;
          }));
    Synth.Play.chord(synth, scale.root, /* Major */0);
    setTimeout((function (param) {
            Synth.Play.note(synth, note);
          }), 800);
  };
  var playResolutionPath = function (synth) {
    if (path !== undefined) {
      return Synth.Play.path(synth, path, 300);
    } else {
      console.log("Ain't no path to resolve");
      return ;
    }
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("button", {
                      children: "Play Note and initialize synth",
                      onClick: (function (_event) {
                          withSynth(synth, playNote);
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Play Notes",
                      onClick: (function (_event) {
                          withSynth(synth, playChord);
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Play Base Chord",
                      onClick: (function (_event) {
                          withSynth(synth, playNoteGetPath);
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Play Resolution Path",
                      onClick: (function (_event) {
                          withSynth(synth, playResolutionPath);
                        })
                    })
              ]
            });
}

var App = {
  make: ReactApp$App
};

var param = document.querySelector("#root");

if (param == null) {
  console.error("Failed to start React: couldn't find the #root element");
} else {
  Client.createRoot(param).render(JsxRuntime.jsx(ReactApp$App, {}));
}

export {
  App ,
}
/* param Not a pure module */
